# -*- coding: utf-8 -*-
"""sales_prediction_using python _task_5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xk7F765LCzZeGUMApTrkFryivmRESz78
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

df=pd.read_csv('sales_prediction.csv')

df.head()

df.columns

df.drop('Unnamed: 0', inplace=True, axis=1)

df.info()

df.shape

df.isnull().sum()

df.describe()

df.plot(kind='box', subplots=True, layout=(4, 4), figsize=(14, 14))

from scipy import stats
df = df[(np.abs(stats.zscore(df)) < 3).all(axis=1)]

Q1 = df.quantile(0.25)
Q3 = df.quantile(0.75)
IQR = Q3 - Q1
((df < (Q1 - 1.5 * IQR)) | (df > (Q3 + 1.5 * IQR))).sum()

import seaborn as sns
sns.lmplot(x='TV', y='Sales', data=df)

import seaborn as sns
sns.lmplot(x='Radio', y='Sales', data=df)

import seaborn as sns
sns.lmplot(x='Newspaper', y='Sales', data=df)

df.corr()['Sales']

df.keys()

x=df[['TV', 'Radio', 'Newspaper']]
y=df['Sales']

X_train, X_test, y_train,y_test = train_test_split(x,y,test_size = 0.20, random_state = 0)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)

from sklearn.linear_model import LinearRegression
model= LinearRegression()

model.fit(X_train,y_train)

# constant (b - bias)
model.intercept_

# coefficients (w - weights)
model.coef_

y_pred=model.predict(X_test)

from sklearn.metrics import r2_score,mean_squared_error
mse=mean_squared_error(y_test,y_pred)
rmse=np.sqrt(mse)
print(rmse)
r2_score=r2_score(y_test,y_pred)
print(r2_score*100)

print(y_pred)

act_predict= pd.DataFrame({
    'Actual': y_test.values.flatten(),
    'Predict': y_pred.flatten()})
act_predict.head(5)

act_predict.sample(10).plot(kind='bar')

plt.scatter(y_test,y_pred,c='g')

# Calculate the R-squared value for the train data
train_score = model.score(X_train, y_train)

# Calculate the R-squared value for the test data
test_score = model.score(X_test, y_test)

# Print the R-squared values for both the train and test data
print("R-squared value for train data:", train_score*100)
print("R-squared value for test data:", test_score*100)